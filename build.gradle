plugins {
    id 'java'
    id 'io.freefair.lombok' version '3.8.4'
    id 'application'
    id 'jacoco'
}

jacocoTestReport {
    reports {
        xml.setEnabled(false)
        csv.setEnabled(false)
        html.destination file("${buildDir}/reports/jacoco")
    }
}

group 'com.rsegeda'
version '1.0-SNAPSHOT'

mainClassName = 'com.rsegeda.moneytransfer.Main'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestImplementation.extendsFrom testImplementation
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.9.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.google.inject', name: 'guice', version: '4.2.2'
    compile group: 'org.everit.json', name: 'org.everit.json.schema', version: '1.5.1'

    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'


    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testCompile 'org.mockito:mockito-junit-jupiter:3.0.0'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'

    integrationTestImplementation 'org.junit.platform:junit-platform-launcher:1.5.1'
    integrationTestCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.9'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.rsegeda.moneytransfer.Main',
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
        )
    }
}

task copyToLib(type: Copy) {
    into "${buildDir}/libs/lib"
    from configurations.runtime
}

build.dependsOn(copyToLib)

test {
    useJUnitPlatform()

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

integrationTest {
    useJUnitPlatform()

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}
